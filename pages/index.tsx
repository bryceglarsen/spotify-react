import type { NextPage } from 'next'

import Head from 'next/head'
import styles from '../styles/Home.module.css'
import React, { useState, useEffect } from 'react'
import { Breadcrumb, Col, Divider, Image, Layout, Menu, Popover, Row, Space } from 'antd';
import {
  AppstoreOutlined,
  BarChartOutlined,
  CloudOutlined,
  ShopOutlined,
  TeamOutlined,
  UploadOutlined,
  UserOutlined,
  VideoCameraOutlined,
} from '@ant-design/icons';
import type { MenuProps } from 'antd';
import { spotifyStyle } from 'styles'
import { AlbumCover, TrackFeatures } from 'components'
import { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'

const { Header, Content, Footer, Sider } = Layout;

export async function getStaticProps() {
  // AUTHENTICATION CREDS
  const client_id = process.env.CLIENT_ID
  const client_secret = process.env.CLIENT_SECRET
  // GET OAUTH TOKEN
    // https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/
    // https://stackoverflow.com/questions/64305250/how-to-post-to-spotify-api-token-endpoint-with-javascript
  const access_token = await fetch('https://accounts.spotify.com/api/token',
    {
      method: 'POST',
      headers: {
        Authorization: `Basic ${(new Buffer(client_id + ':' + client_secret).toString('base64'))}`,
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
      },
      body: 'grant_type=client_credentials',
    }
    ).then(response => response.json()
    ).then(data => data.access_token);
    console.log(`Access Token: ${access_token}`)

  const fetchHeaders = {
    Authorization: `Bearer ${access_token}`,
    'Content-Type': 'application/json'
  }

  // LIST OF YOUR FAVORITE ALBUMS
  const albumIds = [
    '6BN0KczNzSrfmKoQzd6lMS',
    '2CB0fsRN3Ox0YFCLsfkHaa',
    '21KIagsx1ZvYcv0sVkEAWv',
    '4K9AT9Lu48MOMK3YK4GOR6',
  ]
  // FETCH ALBUM DETAILS
    // https://developer.spotify.com/console/get-several-albums/
    // https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-albums-tracks
  const albums = await fetch(`https://api.spotify.com/v1/albums?ids=${albumIds.join(',')}`,
    {
      headers: { ...fetchHeaders }
    }).then(response => response.json()
  ).then(data => data.albums)
  // FETCH TRACK FEATURES
    // https://developer.spotify.com/console/get-audio-features-several-tracks/
    // https://developer.spotify.com/documentation/web-api/reference/#/operations/get-several-audio-features
  // create fetcher function to wrap in Promise.all
  const fetcher = (trackIds: string) => fetch(
    `https://api.spotify.com/v1/audio-features?ids=${trackIds}`,
      {
        headers: { ...fetchHeaders }
      }
    ).then(response => response.json()
    ).then((data) => {
      return data.audio_features
    })
  const audioFeatures = await Promise.all(albums.map((album) => fetcher(album.tracks.items.map((track) => track.id).join(',')))
  )

  return {
    props: {
      albums: albums,
      features: audioFeatures,
      token: access_token,
    },
    revalidate: 60
  }
}

export default function Home({ albums, features, token }) {
  const [selectedAlbum, setSelectedAlbum] = useState<any>(albums[0])
  const [selectedTrack, setSelectedTrack] = useState<any>(albums[0].tracks.items[0])
  const [selectedFeatures, setSelectedFeatures] = useState<any>(features[0])

  const albumCovers = albums.map((album, index) =>
    <AlbumCover
      album={album}
      selectedAlbum={selectedAlbum}
      setSelectedAlbum={setSelectedAlbum}
      setSelectedTrack={setSelectedTrack}
      audioFeatures={features[index]}
      setSelectedFeatures={setSelectedFeatures}
    />
  )
  const featuresData = Object.assign(...Object.keys(selectedFeatures[0]).map( key =>
    ({ [key]: selectedFeatures.map( o => o[key] ) })
  ))
  const featuresCharts = <TrackFeatures featuresData={selectedFeatures} selectedAlbum={selectedAlbum} selectedTrack={selectedTrack} setSelectedTrack={setSelectedTrack} />

  const trackList = (
    <div>
      <ul style={{ listStyle: "none" }}>
      {selectedAlbum.tracks.items.map(track =>
        <li key={track.id} onClick={() => {console.log(track.name, track); setSelectedTrack(track)}}>
            <a>{track.track_number}. {track.name}</a>
        </li>)
      }
      </ul>
    </div>
  )


  return (
    <Layout hasSider>
    <Head>
      <title>Spotify JS Visualization</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Sider
      style={{
        overflow: 'auto',
        height: '100vh',
        position: 'fixed',
        left: 0,
        top: 0,
        bottom: 0,
      }}
    >
      <div style={{display: 'flex', justifyContent:'center', alignItems:'center', height: '100vh'}}>
      <Space direction="vertical" >
        {albumCovers}
      </Space>
      </div>
    </Sider>
    <Layout className="site-layout" style={{ height: '100vh', marginLeft: 200 }}>
      <Row align='middle' wrap={false}>
        <Col flex="auto">
          <Breadcrumb style={{ margin: '16px', fontSize: '1.5rem', fontWeight: 'bold' }}>
            <Breadcrumb.Item style={{ ...spotifyStyle.inactive }}>{selectedAlbum.artists[0].name}</Breadcrumb.Item>
            <Breadcrumb.Item style={{ ...spotifyStyle.inactive }}>{selectedAlbum.name}</Breadcrumb.Item>
            <Breadcrumb.Item style={{ ...spotifyStyle.active }}>{selectedTrack.name}</Breadcrumb.Item>
          </Breadcrumb>
        </Col>
        <Col flex="none">
          <audio controls src={selectedTrack.preview_url} style={{ height: '30px', margin: '16px' }}></audio>
        </Col>
      </Row>
      <Content style={{ top: 0, margin: '24px 16px 0', overflow: 'initial' }}>
        <div className="site-layout-background" style={{ padding: 24, textAlign: 'center' }}>
          {featuresCharts}
        </div>
      </Content>
      <Footer style={{ textAlign: 'center', bottom: 0 }}>Vizzin' with JS Â©2022 Created by Slalom SV!</Footer>
    </Layout>
  </Layout>
  )
}